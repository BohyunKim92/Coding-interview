class Solution(object):
    def isValid(self, s):
        """
        Problem: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
        An input string is valid if:
        - brackets must be closed by the same type of brackets.
        - Open brackets must be closed in the correct order.
        - Every close bracket has a corresponding open bracket of the same type.
        
        :type s: str
        :rtype: bool
        """
        if not 1<= len(s)<= 10**4:
            print("s.length error")
            return 
        stack = [] # create an empty stack to store opening brackets
        print(not stack)
        for c in s: # loop through each character in the string
            if c in '([{': # if the character is an opening bracket
                stack.append(c) # push it onto the stack
            else: # if the character is a closing bracket
                if not stack: # take care of the case when there is no opening braket in the first index of the string.
                    return False 
                if c == ")" and stack[-1] != '(': #make sure each matching bracket is in the last order.
                    return False
                if c == '}' and stack[-1] != '{':
                    return False
                if c == ']' and stack[-1] != '[':
                    return False # the string is not valid, so return false
                stack.pop() # otherwise, pop the opening bracket from the stack
        return not stack # if the stack is empty, all opening brackets have been matched with their corresponding closing brackets,
                         # so the string is valid, otherwise, there are unmatched opening brackets, so return false